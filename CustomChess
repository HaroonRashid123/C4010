'''
    COMP 4010 [Fall 2024]
    Carleton University

    Project Details:
        ~ RL Chess Agent ~
        Date: October 15, 2024

        Group Members:
            Kyle Eng 101192595
'''

import numpy as np
from scipy.linalg import block_diag
import matplotlib
from matplotlib import pyplot as plt
import gymnasium as gym
from gymnasium.error import DependencyNotInstalled

EMPTY_SQUARE_ID = 0
KING_ID = 1
QUEEN_ID = 2
ROOK_ID = 3
BISHOP_ID = 4
KNIGHT_ID = 5
PAWN_ID = 6

KING = 'KING'
QUEEN = 'QUEEN'
ROOK = 'ROOK'
BISHOP = 'BISHOP'
KNIGHT = 'KNIGHT'
PAWN = 'PAWN'

KING_DESC = 'K'
QUEEN_DESC = 'Q'
ROOK_DESC = 'R'
BISHOP_DESC = 'B'
KNIGHT_DESC = 'N'
PAWN_DESC = 'P'

WHITE = 'WHITE'
BLACK = 'BLACK'

CONVERT_PAWN_TO_QUEEN_REWARD = 10
PAWN_VALUE = 1
KNIGHT_VALUE = 3
BISHOP_VALUE = 3
ROOK_VALUE = 5
QUEEN_VALUE = 10
WIN_REWARD = 100
LOSS_REWARD = -100

INVALID_ACTION_REWARD = -10
VALID_ACTION_REWARD = 10

class Piece:
    id: int
    icon: str
    desc: str
    type: str
    color: str
    value: float

PIECES = [
    Piece(icon="♙", desc=PAWN_DESC, color=BLACK, type=PAWN, id=-PAWN_ID, value=PAWN_VALUE),
    Piece(icon="♘", desc=KNIGHT_DESC, color=BLACK, type=KNIGHT, id=-KNIGHT_ID, value=KNIGHT_VALUE),
    Piece(icon="♗", desc=BISHOP_DESC, color=BLACK, type=BISHOP, id=-BISHOP_ID, value=BISHOP_VALUE),
    Piece(icon="♖", desc=ROOK_DESC, color=BLACK, type=ROOK, id=-ROOK_ID, value=ROOK_VALUE),
    Piece(icon="♕", desc=QUEEN_DESC, color=BLACK, type=QUEEN, id=-QUEEN_ID, value=QUEEN_VALUE),
    Piece(icon="♔", desc=KING_DESC, color=BLACK, type=KING, id=-KING_ID, value=0),
    Piece(icon=".", desc="", color=None, type=None, id=EMPTY_SQUARE_ID, value=0),
    Piece(icon="♚", desc=KING_DESC, color=WHITE, type=KING, id=KING_ID, value=0),
    Piece(icon="♛", desc=QUEEN_DESC, color=WHITE, type=QUEEN, id=QUEEN_ID, value=QUEEN_VALUE),
    Piece(icon="♜", desc=ROOK_DESC, color=WHITE, type=ROOK, id=ROOK_ID, value=ROOK_VALUE),
    Piece(icon="♝", desc=BISHOP_DESC, color=WHITE, type=BISHOP, id=BISHOP_ID, value=BISHOP_VALUE),
    Piece(icon="♞", desc=KNIGHT_DESC, color=WHITE, type=KNIGHT, id=KNIGHT_ID, value=KNIGHT_VALUE),
    Piece(icon="♟", desc=PAWN_DESC, color=WHITE, type=PAWN, id=PAWN_ID, value=PAWN_VALUE),
]

class ChessBoard(gym.Env):
    
    def __init__(self, render_mode=None, init_state=None, goal=None):

        if not hasattr(self, 'layout'):
            raise ValueError('Need layout in subclass')

        # Size of Board
        self._size = len(self.layout[0])
        
        # Black vs White Pieces, 6x6 = size of board 
        self.observation_space = gym.spaces.Box(-6, 6, (6, 6))

        # + 1 for White vs Black Turn
        self.action_space = gym.spaces.Discrete(36 * 36 + 1)

        self.n_states = np.prod(self.observation_space.shape)
        self.n_actions = self.action_space.n

        self._to_state = {}  # maps (x, y) to state #
        state_num = 0
        self._limits = [len(layout_lines), len(layout_lines[0])]
        for i in range(self._limits[0]):
            for j in range(self._limits[1]):
                if self._occupancy[i, j] == 0:
                    self._to_state[(i, j)] = state_num
                    state_num += 1
        self._to_cell = {v: k for k, v in self._to_state.items()}  # maps state # to (x, y)

        self._goal = goal

        if init_state is None:
            self._init_states = list(range(self._n_states))
            self._init_states = np.delete(self._init_states, goal)  # remove goal
        else:
            assert init_state != goal
            self._init_states = [init_state]

        self._current_cell = None

        self.window_cell_size = 50  # The length of a cell in the PyGame window
        self.window_size = np.array(self._limits) * self.window_cell_size

        # Standard Gym interface
        self.observation_space = gym.spaces.Box(low=0, 
                                                high=self.n_states-1, 
                                                dtype=int)  # cell index
        self.action_space = gym.spaces.Discrete(self.n_actions)
        assert render_mode is None or render_mode in self.metadata['render_modes']
        self.render_mode = render_mode
        self.window = None  # window we draw to
        self.clock = None  # control framerate

    def reset(self, init_state=None):

        if init_state is not None:
            # assert init_state in self._init_states
            state = init_state
        else:
            state = np.random.choice(self._init_states)
        self._current_cell = self._to_cell[state]

        if self.render_mode == 'human':
            self.render()

        return state, {}

    def step(self, action):
        '''
        The agent can perform one of four actions:
                             up, down, left or right
        If the movement would take the agent into a wall
        then the agent remains in the same cell.

        We consider a case in which reward is 1 when reach the goal and 0 everywhere else.
        '''

        next_cell = tuple(self._current_cell + self._directions[action])

        if not self._occupancy[next_cell]:
            self._current_cell = next_cell

        state = self._to_state[self._current_cell]

        terminated = state == self._goal
        reward = 1 if terminated else 0.

        if self.render_mode == 'human':
            self.render()

        return state, reward, terminated, False, {}

    def render(self):

        # PyGame has a different coordinate system (flip)
        try:
            import pygame
        except ImportError as e:
            raise DependencyNotInstalled(
                'pygame is not installed, run `pip install gymnasium[classic-control]`'
            ) from e
        
        if self.window is None and self.render_mode == 'human':
            pygame.init()
            pygame.display.init()
            self.window = pygame.display.set_mode(np.flip(self.window_size))
        if self.clock is None and self.render_mode == 'human':
            self.clock = pygame.time.Clock()

        canvas = pygame.Surface(np.flip(self.window_size))
        canvas.fill((255, 255, 255))

        # First we draw the goal
        pygame.draw.rect(
            canvas,
            (255, 0, 0),
            pygame.Rect(
                self.window_cell_size * np.flip(self._to_cell[self.goal]),
                (self.window_cell_size, self.window_cell_size),
            ),
        )

        # Draw the walls
        for i in range(self._limits[0]):
            for j in range(self._limits[1]):
                if self._occupancy[i, j]:
                    pygame.draw.rect(
                        canvas,
                        0,
                        pygame.Rect(
                            (j * self.window_cell_size, i * self.window_cell_size),
                            (self.window_cell_size, self.window_cell_size),
                        ),
                    )

        # Draw the agent
        pygame.draw.circle(
            canvas,
            (0, 0, 255),
            (np.flip(self._current_cell) + 0.5) * self.window_cell_size,
            self.window_cell_size / 3,
        )

        # Finally, add some gridlines
        for i in range(self._limits[0]):
            pygame.draw.line(
                canvas,
                0,
                (0, self.window_cell_size * i),
                (self.window_size[1], self.window_cell_size * i),
                width=3,
            )
        for i in range(self._limits[1]):
            pygame.draw.line(
                canvas,
                0,
                (self.window_cell_size * i, 0),
                (self.window_cell_size * i, self.window_size[0]),
                width=3,
            )

        if self.render_mode == 'human':
            # The following line copies our drawings from `canvas` to the visible window
            self.window.blit(canvas, canvas.get_rect())
            pygame.event.pump()
            pygame.display.update()

            # We need to ensure that human-rendering occurs at the predefined framerate.
            # The following line will automatically add a delay to keep the framerate stable.
            self.clock.tick(self.metadata['render_fps'])
        else:  # rgb_array
            return np.transpose(
                np.array(pygame.surfarray.pixels3d(canvas)), axes=(1, 0, 2)
            )

    def close(self):
        if self.window is not None:
            import pygame
            pygame.display.quit()
            pygame.quit()

    @property
    def n_actions(self):
        return self._n_actions

    @property
    def n_states(self):
        return self._n_states

    @property
    def goal(self):
        return self._goal

    @property
    def to_cell(self):
        return self._to_cell

class miniChess(ChessBoard):
    def __init__(self, render_mode=None, init_state=None, goal=None):
        self.layout = [
    [-3, -5, -4, -2, -1, -4, -5, -3],
    [-6, -6, -6, -6, -6, -6, -6, -6],
    [0] * 8,
    [0] * 8,
    [0] * 8,
    [0] * 8,
    [6, 6, 6, 6, 6, 6, 6, 6],
    [3, 5, 4, 2, 1, 4, 5, 3],
    ]
        super().__init__(render_mode=render_mode, init_state=init_state, goal=goal)